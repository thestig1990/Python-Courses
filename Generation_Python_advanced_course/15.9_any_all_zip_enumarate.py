# Функция ignore_command() принимает на вход один строковый аргумент command –
# команда, которую нужно проверить,
# и возвращает значение True, если в команде содержится подстрока из списка
# ignore и False – если нет.

# Перепишите функцию ignore_command(), чтобы она использовала встроенные
# функции all()/any() сохранив при этом ее функционал.


def ignore_command(command):
    ignore = ['alias', 'configuration', 'ip', 'sql', 'select', 'update',
              'exec', 'del', 'truncate']
    return any(map(lambda x: True if x in command else False, ignore))


print(ignore_command('get ip'))
print(ignore_command('select all'))
print(ignore_command('delete'))
print(ignore_command('trancate'))


# Используя параллельную итерацию сразу по трем спискам countries, capitals
# и population выведите информацию о стране в формате:

# <capital> is the capital of <country>, population equal <population> people.

countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
population = [145_934_462, 331_002_651, 80_345_321, 67_886_011, 65_273_511,
              1_380_004_385]

for capital, country, population in zip(capitals, countries, population):
    print(f'{capital} is the capital of {country}, population equal {population} people.')


# Внутри шара
# На вход программе подаются три строки текста с вещественными числами,
# значениями абсцисс (x), ординат (y) и аппликат (z) точек трехмерного
# пространства. Напишите программу для проверки расположения всех точек
# с введенными координатами внутри либо на поверхности шара с центром в
# начале координат и радиусом R =2.

# Формат входных данных
# На вход программе подаются три строки текста с вещественными числами,
# разделенными символом пробела – абсциссы, ординаты и аппликаты точек
# в трехмерной системе координат.

# Формат выходных данных
# Программа должна вывести True если все точки с введенными координатами
# находятся внутри или на границе шара и False, если вне.

s1 = input()
s2 = input()
s3 = input()

abscissas = map(float, s1.split())
ordinates = map(float, s2.split())
applicates = map(float, s3.split())

points = list(zip(abscissas, ordinates, applicates))
result = all(map(lambda x: x[0] ** 2 + x[1] ** 2 + x[2] ** 2 <= 4, points))

if result:
    print('True')
else:
    print('False')


# Корректный IP-адрес
# IP-адрес – уникальный числовой идентификатор устройства в компьютерной сети,
# работающей по протоколу TCP/IP.

# В 44-й версии IP-адрес представляет собой 3232-битное число. Адрес
# записывается в виде четырёх десятичных чисел (октетов) со значением
# от 0 до 255 (включительно), разделённых точками, например, 192.168.1.2

# Напишите программу с использованием встроенной функции all() для проверки
# корректности IP-адреса: все ли октеты в IP-адресе – числа со значением от
# 0 до 255.

# Формат входных данных
# На вход программе подается строка в формате x.x.x.x, где x – непустой набор
# символов 0-9, a-z.

# Формат выходных данных
# Программа должна вывести True если введенная строка – корректный IP-адрес
# и False в противном случае.

# Примечание. Ведущие нули следует игнорировать:

ip_string = input().split('.')

result = all(map(lambda x: x.isdigit() and 0 <= int(x) <= 255, ip_string))

print(result)


# Интересные числа
# На вход программе подаются два натуральных числа a и b. Напишите программу
# с использованием встроенной функции all() для обнаружения всех целых чисел
# в диапазоне [a;b], которые делятся на каждую содержащуюся в них цифру без
# остатка.

# Формат входных данных
# На вход программе подаются два натуральных числа aa и bb на отдельных
# строках.

# Формат выходных данных
# Программа должна вывести все числа из диапазона [a;b], удовлетворяющие
# условию задачи, на одной строке, разделяя их символом пробела.

# Примечание. Числа, содержащие нули, неинтересны, их выводить не нужно.

a, b = int(input()), int(input())

list_num = list(range(a, b+1))

list1 = []

for i in list_num:
    if all(list(map(int, str(i)))):
        list1.append(i)

list2 = []

for i in list1:
    if all(i % int(x) == 0 for x in str(i)):
        list2.append(i)

print(*list2)


# Хороший пароль
# Хороший пароль по условиям этой задачи состоит как минимум из 7 символов,
# содержит хотя бы одну цифру, заглавную и строчную букву. Напишите программу
# со встроенной функцией any() для определения хорош ли введенный пароль.

# Формат входных данных
# На вход программе подаётся одна строка текста.

# Формат выходных данных
# Программа должна вывести YES, если строка – хороший пароль, и NO в противном
# случае.

password = input()

password_chek = all([any(map(lambda x: x.isdigit(), password)), any(map(
    lambda x: x.isupper(), password)), any(map(lambda x: x.islower(), password)), len(password) >= 7])

if password_chek:
    print('YES')
else:
    print('NO')



# Отличники
# Учитель Тимур проверял контрольные работы по математике в нескольких классах
# онлайн-школы BEEGEEK и решил убедиться, что в каждом классе есть хотя бы
# один отличник – ученик с оценкой 55 по контрольной работе. Напишите
# программу с использованием встроенных функций all(), any() для помощи Тимуру
# в проверке.

# Формат входных данных
# На вход программе подается натуральное число nn – количество классов. Затем
# для каждого класса вводится блок информации вида:

# натуральное число kk – количество учеников в классе;
# далее вводится kk строк вида: фамилия оценка.
# Формат выходных данных
# Программа должна вывести YES, если в каждом классе есть хотя бы один
# отличник, и NO в противном случае.

n = int(input())

L1 = []
for i in range(n):
    k = int(input())
    L= []
    for j in range(k):
        s = input()
        L.append(s[-1])
    L1.append(L)   

result = all(map(lambda x: '5' in x, L1))

if result:
    print('YES')
else:
    print('NO')