# Напишите функцию count_args(), которая принимает произвольное количество
# аргументов и возвращает количество переданных в нее аргументов.

# Примечание 1. Обратите внимание, что функция должна принимать не список,
# а именно произвольное количество аргументов.


from tkinter import S
from math import sin


def count_args(*args):
    return (len(args))


LIST = [i for i in range(10)]

print(count_args(*LIST))


# Напишите функцию sq_sum(), которая принимает произвольное количество
# числовых аргументов и возвращает сумму их квадратов.

# Примечание 1. Обратите внимание, что функция должна принимать не список,
# а именно произвольное количество аргументов.

def sq_sum(*args):
    sum = 0
    for i in args:
        sum += i**2
    return sum


LIST = [i for i in range(10)]

print(sq_sum(*LIST))


# Напишите функцию mean(), которая принимает произвольное количество
# аргументов и возвращает среднее арифметическое переданных в нее числовых
# (int или float) аргументов.

# Примечание 1. Обратите внимание, что функция должна принимать не список,
# а именно произвольное количество аргументов.

# Примечание 2. Функция должна игнорировать аргументы всех типов, кроме int
# или float.

def mean(*args):
    if len(args) == 0:
        return float('0')
    average = float('0')
    count = 0
    for t in args:
        if type(t) in (int, float):
            count += 1
            average += t
    if count == 0:
        return float('0')
    return average/count


print(mean())
print(mean(7))
print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
print(mean(True, ['stepik'], 'beegeek', (1, 2)))
print(mean(-1, 2, 3, 10, ('5')))
print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))


# Напишите функцию info_kwargs(), которая принимает произвольное количество
# именованных аргументов и печатает именованные аргументы в соответствии с
# образцом: <имя аргумента>: <значение аргумента>, при этом имена аргументов
# следуют в алфавитном порядке (по возрастанию).

# Примечание 1. Обратите внимание, что функция должна принимать не список,
# а именно произвольное количество именованных аргументов.

def info_kwargs(**kwargs):
    for key, value in sorted(kwargs.items()):
        print(key + ':', value)
    return '\n'


print(info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher'))


# Напишите функцию print_products(), которая принимает произвольное количество
# аргументов и выводит список продуктов (любая непустая строка) по образцу:
# <номер продукта>) <название продукта> (нумерация продуктов начинается с
# единицы). Если среди переданных аргументов нет ни одного продукта,
# необходимо вывести текст Нет продуктов.

# Примечание 1. Обратите внимание, что функция должна принимать не список,
# а именно произвольное количество аргументов.

# Примечание 2. Числа, списки, кортежи, словари, множества и другие
# нестроковые объекты продуктами не являются и их нужно игнорировать.

def print_products(*args):
    count = 0
    for t in args:
        if type(t) is str and len(t) > 0:
            count += 1
            print(f'{count}) {t}')
    if count == 0:
        print('Нет продуктов')
    return '\n'


print(print_products('Бананы', [1, 2],
      ('Stepik',), 'Яблоки', '', 'Макароны', 5, True))
print(print_products([4], {}, 1, 2, {'Beegeek'}, ''))


# Напишите функцию greet(), которая принимает произвольное количество
# аргументов строк имен (как минимум одно) и возвращает приветствие в
# соответствии с образцом.

# Примечание 1. Обратите внимание, что функция должна принимать не список,
# а именно произвольное количество аргументов

def greet(name, *args):
    if len(args) == 0:
        return f'Hello, {name}!'
    else:
        names_add = ' and '.join(list(args))
        return f'Hello, {name} and {names_add}!'


print(greet('Timur', 'Roman', 'Tolayn'))
