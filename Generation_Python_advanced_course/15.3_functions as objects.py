# Дан список numbers, содержащий кортежи чисел. Напишите программу, которая с
# помощью встроенных функций min() и max() выводит те кортежи (каждый на
# отдельной строке), которые имеют минимальное и максимальное среднее
# арифметическое значение элементов.

from math import sin
numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,),
           (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10, 20, 30, -2),
           (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6),
           (-9, 8, 4), (90, 1, -45, -21)]


def average(tuple_1):
    return sum(tuple_1) / len(tuple_1)


print(min(numbers, key=average))
print(max(numbers, key=average))


# Напишите программу, которая сортирует список points координат точек
# плоскости в соответствии с расстоянием от начала координат (точки(0;0)).
# Программа должна вывести отсортированный список.

points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3),
          (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]


def f(coord):
    return coord[0]**2 + coord[1]**2


points.sort(key=f)

print(points)


# Дан список numbers, содержащий кортежи чисел. Напишите программу, которая
# сортирует и выводит список numbers в соответствии с суммой минимального и
# максимального элемента кортежа.

numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67),
           (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30),
           (50, 40, 50), (34, 78, 65), (-5, 90, -1)]


def f(tuple_1):
    return min(tuple_1) + max(tuple_1)


numbers.sort(key=f)

print(numbers)


# Сортируй как хочешь
# Список athletes содержит сведения о спортсменах в виде кортежей:
# (имя, возраст, рост, вес).

# Напишите программу сортировки списка спортсменов по указанному полю:

# 1: по имени;
# 2: по возрасту;
# 3: по росту;
# 4: по весу.
# Формат входных данных
# На вход программе подается натуральное число от 11 до 44 – номер поля по
# которому требуется отсортировать список.

# Формат выходных данных
# Программа должна вывести отсортированный по заданному полю список в
# соответствии с примерами.

athletes = [('Дима', 10, 130, 35), ('Тимур', 11, 135, 39),
            ('Руслан', 9, 140, 33), ('Рустам', 10, 128, 30),
            ('Амир', 16, 170, 70), ('Рома', 16, 188, 100),
            ('Матвей', 17, 168, 68), ('Петя', 15, 190, 90)]

n = int(input())


def sort_athletes(info):
    return info[n-1]


athletes.sort(key=sort_athletes)

for c in athletes:
    print(*c)


# Математические функции
# Напишите программу, которая принимает число и название функции, а выводит
# результат применения функции к данному числу.

# Список возможных функций:

# квадрат: функция принимает число и возвращает его квадрат;
# куб: функция принимает число и возвращает его куб;
# корень: функция принимает число и возвращает корень квадратный из этого
# числа;
# модуль: функция принимает число и возвращает его модуль;
# синус: функция принимает число (в радианах) и возвращает синус этого числа.
# Формат входных данных
# На вход программе подается целое число и название функции, записанные на
# отдельных строках.

# Формат выходных данных
# Программа должна выдать результат применения функции к числу.

# from math import sin

n, s = int(input()), input()


def square():
    return n**2


def cube():
    return n**3


def my_sqrt():
    return n**0.5


def my_abs():
    return abs(n)


def my_sin():
    return sin(n)


procedure = {'квадрат': square, 'куб': cube,
             'корень': my_sqrt, 'модуль': my_abs, 'синус': my_sin}

print(procedure[s]())


# Интересная сортировка-1
# На вход программе подается строка натуральных чисел. Из элементов строки
# формируется список чисел.

# Напишите программу сортировки списка чисел в порядке неубывания суммы их
# цифр. При этом, если два числа имеют одинаковую сумму цифр, следует
# сохранить их взаиморасположение в начальном списке.

# Формат входных данных
# На вход программе подается строка текста, содержащая натуральные числа,
# разделенные пробелами.

# Формат выходных данных
# Программа должна вывести отсортированный список чисел в соответствии с
# условием задачи, разделяя его элементы одним пробелом.

s = '12 14 79 7 4 123 45 90 111'
list_s = s.split()


def sum_digits(num):
    return sum([int(i) for i in num])


print(*sorted(list_s, key=sum_digits))


# Интересная сортировка-2
# На вход программе подается строка натуральных чисел. Из элементов строки
# формируется список чисел.

# Напишите программу сортировки списка чисел в порядке неубывания суммы их
# цифр. При этом, если у двух чисел одинаковая сумма цифр, их следует вывести
# в порядке неубывания.

s = '111 14 79 7 4 123 90 45 12 171'

list_int = [int(i) for i in s.split()]

list_int.sort()


def sum_digits(num):
    return sum((int(i) for i in str(num)))


print(*sorted(list_int, key=sum_digits))
