# Словарь программиста
# Программисты, как вы уже знаете, постоянно учатся, а в общении между собой
# используют весьма специфический язык. Чтобы систематизировать
# ваш пополняющийся профессиональный лексикон, мы придумали эту задачу.
# Напишите программу создания небольшого словаря сленговых
# программерских выражений, чтобы она потом по запросу возвращала значения из
# этого словаря.
# Формат входных данных
# В первой строке задано одно целое число n — количество слов в словаре. В
# следующих n строках записаны слова и их определения, разделенные
# двоеточием и символом пробела. В следующей строке записано целое число m —
# количество поисковых слов, чье определение нужно вывести. В
# следующих m строках записаны сами слова, по одному на строке.
# Формат выходных данных
# Для каждого слова, независимо от регистра символов, если оно присутствует в
# словаре, необходимо вывести его определение. Если слова в
# словаре нет, программа должна вывести "Не найдено", без кавычек.

# VAR1
n = int(input())
List1 = []
for i in range(n):
    s = input().split(': ')
    List1.append(s)
# print(List1)

n1 = int(input())
List2 = []
for c in range(n1):
    s1 = input().lower()
    List2.append(s1)
# print(List2)

for c in List1:
    c[0] = c[0].lower()

info_dict = dict(List1)
# print(info_dict)

for c in List2:
    if c in info_dict:
        print(info_dict[c])
    else:
        print('Не найдено')


# VAR2
mydict = {}

for _ in range(int(input())):
    key, value = input().split(': ')
    mydict[key.lower()] = value

for _ in range(int(input())):
    print(mydict.get(input().lower(), 'Не найдено'))


# Анаграммы 1
# Анаграмма – слово (словосочетание), образованное путём перестановки букв,
# составляющих другое слово (или словосочетание). Например, английские слова
# evil и live – это анаграммы.
# На вход программе подаются два слова. Напишите программу, которая определяет,
# являются ли они анаграммами.
# Формат входных данных
# На вход программе подаются два слова, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести YES если слова являются анаграммами и NO в
# противном случае.

# VAR1
word1 = input()
word2 = input()

dict1 = {}
for c in word1:
    dict1[c] = word1.count(c)
# print(dict1)

dict2 = {}
for c in word2:
    dict2[c] = word2.count(c)
# print(dict2)

if dict1 == dict2:
    print('YES')
else:
    print('NO')


# VAR2
d = {}
for c in input().lower():
    d[c] = d.get(c, 0) + 1
for c in input().lower():
    d[c] = d.get(c, 0) - 1

print(('NO', 'YES')[set(d.values()) == {0}])


# Анаграммы 2
# На вход программе подаются два предложения. Напишите программу, которая
# определяет, являются они анаграммами или нет. Ваша программа должна
# игнорировать регистр символов, знаки препинания и пробелы.
# Формат входных данных
# На вход программе подаются два предложения, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести YES , если предложения – анаграммы и NO в
# противном случае.
# Примечание. Кроме слов в тексте могут присутствовать пробелы и знаки
# препинания .,!?:;-. Других символов в тексте нет.

# VAR1
word1 = input().lower()
word2 = input().lower()

dict1 = {}
for c in word1:
    if c.isalpha():
        dict1[c] = word1.count(c)
# print(dict1)

dict2 = {}
for c in word2:
    if c.isalpha():
        dict2[c] = word2.count(c)
# print(dict2)

if dict1 == dict2:
    print('YES')
else:
    print('NO')


# VAR2
def s(word):
    res = {}
    for i in word.lower():
        if i.isalpha():
            res[i] = res.get(i, 0) + 1
    return res


print(("NO", "YES")[s(input()) == s(input())])


# Словарь синонимов
# Вам дан словарь, состоящий из пар слов-синонимов. Повторяющихся слов в
# словаре нет. Напишите программу, которая для одного данного слова
# определяет его синоним.

# Формат входных данных
# На вход программе подается количество пар синонимов n. Далее следует n
# строк, каждая строка содержит два слова-синонима. После этого следует одно
# слово, синоним которого надо найти.

# Формат выходных данных
# Программа должна вывести одно слово, синоним введенного.

# VAR1
mydict = {}

for _ in range(int(input())):
    key, value = input().split()
    mydict[key], mydict[value] = value, key

print(mydict[input()])

# VAR2
d = dict((input().split() for i in range(int(input()))))
ad = {v: k for k, v in d.items()}
key = input()
print(ad.get(key, d.get(key)))


# Страны и города
# На вход программе подается список стран и городов каждой страны. Затем даны
# названия городов. Напишите программу, которая для каждого города выводит,
# в какой стране он находится.

# Формат входных данных
# Программа получает на вход количество стран n. Далее идет n строк, каждая
# строка начинается с названия страны, затем идут названия городов этой
# страны. В следующей строке записано число m, далее идут m запросов —
# названия каких-то m городов, из перечисленных выше.

# Формат выходных данных
# Программа должна вывести название страны, в которой находится данный город
# в соответствии с примером.


# VAR1
mydict = {}
for _ in range(int(input())):
    s = input().split()
    key, value = s[0], s[1:]
    mydict[key] = value

for _ in range(int(input())):
    s1 = input()
    for c in mydict:
        if s1 in mydict[c]:
            print(c)


# VAR2
d = {}

for _ in range(int(input())):
    country, *cities = input().split()
    d.update(dict.fromkeys(cities, country))

for _ in range(int(input())):
    print(d[input()])


# Телефонная книга
# Тимур записал телефоны всех своих друзей, чтобы автоматизировать поиск
# нужного номера.

# У каждого из друзей Тимура может быть один или более телефонных номеров.
# Напишите программу, которая поможет Тимуру находить все номера определённого
# друга.

# VAR1
call_book = {}

for _ in range(int(input())):
    phone, name = input().lower().split()
    call_book.setdefault(name, []).append(phone)

for _ in range(int(input())):
    name = input().lower()
    print(*call_book.get(name, ['абонент не найден']))


# VAR2
call_book = {}
for _ in range(int(input())):
    phone, name = input().split()
    call_book[name.lower()] = call_book.setdefault(
        name.lower(), "") + f'{phone} '

for _ in range(int(input())):
    print(call_book.get(input().lower(), 'абонент не найден'))


# Секретное слово
# Напишите программу для расшифровки секретного слова методом частотного
# анализа.

# Формат входных данных
# В первой строке задано зашифрованное слово. Во второй строке задано одно
# целое число n – количество букв в словаре. В следующих n строках записано,
# сколько раз буква алфавита встречается в этом слове – <буква>: <частота>.

# Формат выходных данных
# Программа должна вывести дешифрованное слово.

# VAR1
secret_word = input()

mydict = {}

for _ in range(int(input())):
    value, key = input().split(': ')
    mydict[int(key)] = value

for c in secret_word:
    if secret_word.count(c) in mydict:
        print(mydict[secret_word.count(c)], end='')


# VAR2
ree, symb = input(), {}

for _ in range(int(input())):
    b, a = input().split(': ')
    symb[int(a)] = b

print(*(symb[ree.count(i)]for i in ree), sep='')
